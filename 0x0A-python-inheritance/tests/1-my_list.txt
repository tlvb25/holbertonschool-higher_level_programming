The ``1-my_list`` module
======================

Using ``print_sorted``
----------------------

This is an example text file in reStructuredText format.  First import
``print_sorted`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:
    Testing empty list
    >>> my_list = MyList()
    >>> print(my_list)
    []
    >>> my_list.print_sorted()
    []

    Test with alphabet:
    >>> my_list = MyList()
    >>> my_list.append(a)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
    NameError: name 'a' is not defined  

    Test negative numbers
    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(-4)
    >>> my_list.append(8)
    >>> print(my_list)
    [8, -4, 8]
    >>> my_list.print_sorted()
    [-4, 8, 8]

    Test with strings:
    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(4)
    >>> my_list.append('betty')
    >>> print(my_list)
    [8, 4, 'betty']
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()

    Testing correct input
    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> my_list.append(4)
    >>> my_list.append(8)
    >>> my_list.append(4)
    >>> print(my_list)
    [8, 4, 8, 4]
    >>> my_list.print_sorted()
    [4, 4, 8, 8]

    Testing floats:
    >>> my_list = MyList()
    >>> my_list.append(8.0)
    >>> my_list.append(4.0)
    >>> my_list.append(9.0)
    >>> my_list.append(10.0)
    >>> print(my_list)
    [8.0, 4.0, 9.0, 10.0]
    >>> my_list.print_sorted()
    [4.0, 8.0, 9.0, 10.0]

    Test for single element:
    >>> my_list = MyList()
    >>> my_list.append(8)
    >>> print(my_list)
    [8]
    >>> my_list.print_sorted()
    [8]

    
    >>> my_list.print_sorted(8)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given
    